#pragma once

#include <memory>
#include <string>

#include "framedata.h"

/*! A 'pure' parser a layout description generated by the 'dump' command.
 *
 * Pure means that it does not affect the actual tiling tree. The purpose is to
 * first parse and validate the input string. The application of this parsing
 * result to the actual frame tree is done by the respective command in the
 * FrameTree class.
 *
 * Hence, the result of this parsing process is a 'raw tree', meaning a tree of
 * RawFrameNode objects, i.e. actually of RawFrameLeaf, RawFrameSplit. All the
 * members are already validated, so e.g. invalid window ids are already
 * filtered.
 *
 */

class RawFrameNode {
protected:
    RawFrameNode() {};
};

class RawFrameLeaf : public RawFrameNode,
                     public FrameDataLeaf {
public:
};

class RawFrameSplit : public RawFrameNode,
                      public FrameDataSplit<RawFrameNode> {
public:
};

/*! the FrameParser is actually only a interface to access the parsing result
 * and possible error messages, because the parser methods are private member
 * functions. The parsing starts already in the constructor.
 */
class FrameParser {
public:
    FrameParser(std::string buf);
    std::shared_ptr<RawFrameNode> result();
private:
    int position_ = 0; //! the current parsing position
    std::shared_ptr<RawFrameNode> root_;
};
